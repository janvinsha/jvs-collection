{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/work/jvs-collection/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\nimport * as UAuthWeb3Modal from \"@uauth/web3modal\";\nimport UAuthSPA from \"@uauth/js\";\nimport Web3Modal from \"web3modal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const uauthOptions = {\n  clientID: \"ea424726-6d2b-40e5-bad8-d969a3f9183f\",\n  redirectUri: \"https://jvs-collection.netlify.app\",\n  scope: \"openid wallet\"\n};\nlet providerOptions = {\n  \"custom-uauth\": {\n    // The UI Assets\n    display: UAuthWeb3Modal.display,\n    // The Connector\n    connector: UAuthWeb3Modal.connector,\n    // The SPA libary\n    package: UAuthSPA,\n    // The SPA libary options\n    options: uauthOptions\n  }\n};\nconst web3Modal = new Web3Modal({\n  providerOptions,\n  cacheProvider: true,\n  theme: `light`\n});\nUAuthWeb3Modal.registerWeb3Modal(web3Modal);\nconst TWITTER_HANDLE = \"janvinsha\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"https://testnets.opensea.io/collection/coolerenyeagernft-v2\";\nconst TOTAL_MINT_COUNT = 100;\n\nconst App = () => {\n  _s();\n\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [minting, setMinting] = useState(false);\n  const [nftAmount, setNftAmount] = useState(\"0\");\n\n  const fetchMints = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        // You know all this\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(CONTRACT_ADDRESS, contractABI.abi, signer); // Get all the domain names from our contract\n\n        const names = await contract.getAllNames(); // For each name, get the record and the address\n\n        const mintRecords = await Promise.all(names.map(async name => {\n          const mintRecord = await contract.records(name);\n          const owner = await contract.domains(name);\n          return {\n            id: names.indexOf(name),\n            name: name,\n            record: mintRecord,\n            owner: owner\n          };\n        }));\n        console.log(\"MINTS FETCHED \", mintRecords);\n        setMints(mintRecords);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    if (web3Modal.cachedProvider) {\n      let wallet = await web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(wallet);\n      const accounts = await (provider === null || provider === void 0 ? void 0 : provider.listAccounts());\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account); // Setup listener! This is for the case where a user comes to our site\n        // and ALREADY had their wallet connected + authorized.\n\n        setupEventListener();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n\n      const signer = provider.getSigner();\n      let chainId = await signer.getChainId();\n      console.log(\"Connected to chain \" + chainId); // String, hex code of the chainId of the Rinkebey test network\n\n      const rinkebyChainId = \"0x4\";\n\n      if (chainId !== rinkebyChainId) {\n        alert(\"You are not connected to the Rinkeby Test Network!\");\n      }\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        web3Modal.clearCachedProvider();\n      }\n\n      const wallet = await web3Modal.connect();\n      const tProvider = new ethers.providers.Web3Provider(wallet);\n      const accounts = await tProvider.listAccounts();\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]); // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet); // Same stuff again\n\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer); // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(`Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`);\n        });\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        console.log(\"Mining...please wait.\");\n        setMinting(true);\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setMinting(false); //set NFT amount\n\n        let realAmount = await connectedContract.getTotalNFTsMintedSoFar();\n        console.log(realAmount.toString());\n        setNftAmount(realAmount.toString());\n      } else {\n        setMinting(false);\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      setMinting(false);\n      console.log(error);\n    }\n  };\n\n  const refreshAmount = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n        let realAmount = await connectedContract.getTotalNFTsMintedSoFar();\n        console.log(realAmount.toString());\n        setNftAmount(realAmount.toString());\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    refreshAmount();\n  }, []);\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: connectWallet,\n    className: \"cta-button connect-wallet-button\",\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 240,\n    columnNumber: 5\n  }, this);\n\n  const renderMintUI = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: askContractToMintNft,\n    className: \"cta-button connect-wallet-button\",\n    children: !minting ? \"Mint NFT\" : \"Minting.....\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header gradient-text\",\n          children: \"My NFT Collection\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"Each unique. Each beautiful. Discover your NFT today.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), currentAccount === \"\" ? \"\" : /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: [nftAmount, \"/100 NFTs minted so far\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), currentAccount === \"\" ? renderNotConnectedContainer() : renderMintUI(), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            className: \"footer-text\",\n            href: \"https://testnets.opensea.io/collection/coolerenyeagernft-v2\",\n            children: [\" \", \"\\uD83C\\uDF0A View Collection on OpenSea\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: ` @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 258,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"z/k2zX/aAWTdqdK53axKPVMOQew=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","ethers","myEpicNft","UAuthWeb3Modal","UAuthSPA","Web3Modal","uauthOptions","clientID","redirectUri","scope","providerOptions","display","connector","package","options","web3Modal","cacheProvider","theme","registerWeb3Modal","TWITTER_HANDLE","TWITTER_LINK","OPENSEA_LINK","TOTAL_MINT_COUNT","App","currentAccount","setCurrentAccount","minting","setMinting","nftAmount","setNftAmount","fetchMints","cachedProvider","wallet","connect","provider","providers","Web3Provider","signer","getSigner","contract","Contract","CONTRACT_ADDRESS","contractABI","abi","names","getAllNames","mintRecords","Promise","all","map","name","mintRecord","records","owner","domains","id","indexOf","record","console","log","setMints","error","checkIfWalletIsConnected","accounts","listAccounts","length","account","setupEventListener","chainId","getChainId","rinkebyChainId","alert","connectWallet","clearCachedProvider","tProvider","connectedContract","on","from","tokenId","toNumber","askContractToMintNft","nftTxn","makeAnEpicNFT","wait","hash","realAmount","getTotalNFTsMintedSoFar","toString","refreshAmount","renderNotConnectedContainer","renderMintUI","twitterLogo"],"sources":["/Users/mac/Desktop/work/jvs-collection/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport { ethers } from \"ethers\";\n\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n\nimport * as UAuthWeb3Modal from \"@uauth/web3modal\";\nimport UAuthSPA from \"@uauth/js\";\nimport Web3Modal from \"web3modal\";\n\nexport const uauthOptions = {\n  clientID: \"ea424726-6d2b-40e5-bad8-d969a3f9183f\",\n  redirectUri: \"https://jvs-collection.netlify.app\",\n  scope: \"openid wallet\",\n};\n\nlet providerOptions = {\n  \"custom-uauth\": {\n    // The UI Assets\n    display: UAuthWeb3Modal.display,\n\n    // The Connector\n    connector: UAuthWeb3Modal.connector,\n\n    // The SPA libary\n    package: UAuthSPA,\n\n    // The SPA libary options\n    options: uauthOptions,\n  },\n};\n\nconst web3Modal = new Web3Modal({\n  providerOptions,\n  cacheProvider: true,\n  theme: `light`,\n});\n\nUAuthWeb3Modal.registerWeb3Modal(web3Modal);\n\nconst TWITTER_HANDLE = \"janvinsha\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK =\n  \"https://testnets.opensea.io/collection/coolerenyeagernft-v2\";\nconst TOTAL_MINT_COUNT = 100;\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [minting, setMinting] = useState(false);\n  const [nftAmount, setNftAmount] = useState(\"0\");\n\n  const fetchMints = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        // You know all this\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const signer = provider.getSigner();\n        const contract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          contractABI.abi,\n          signer\n        );\n\n        // Get all the domain names from our contract\n        const names = await contract.getAllNames();\n\n        // For each name, get the record and the address\n        const mintRecords = await Promise.all(\n          names.map(async (name) => {\n            const mintRecord = await contract.records(name);\n            const owner = await contract.domains(name);\n            return {\n              id: names.indexOf(name),\n              name: name,\n              record: mintRecord,\n              owner: owner,\n            };\n          })\n        );\n\n        console.log(\"MINTS FETCHED \", mintRecords);\n        setMints(mintRecords);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    if (web3Modal.cachedProvider) {\n      let wallet = await web3Modal.connect();\n      const provider = new ethers.providers.Web3Provider(wallet);\n      const accounts = await provider?.listAccounts();\n\n      if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n        setCurrentAccount(account);\n\n        // Setup listener! This is for the case where a user comes to our site\n        // and ALREADY had their wallet connected + authorized.\n        setupEventListener();\n      } else {\n        console.log(\"No authorized account found\");\n      }\n\n      const signer = provider.getSigner();\n      let chainId = await signer.getChainId();\n      console.log(\"Connected to chain \" + chainId);\n\n      // String, hex code of the chainId of the Rinkebey test network\n      const rinkebyChainId = \"0x4\";\n      if (chainId !== rinkebyChainId) {\n        alert(\"You are not connected to the Rinkeby Test Network!\");\n      }\n    }\n  };\n\n  const connectWallet = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        web3Modal.clearCachedProvider();\n      }\n\n      const wallet = await web3Modal.connect();\n\n      const tProvider = new ethers.providers.Web3Provider(wallet);\n      const accounts = await tProvider.listAccounts();\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and connected their wallet for the first time.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        // Same stuff again\n\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          alert(\n            `Hey there! We've minted your NFT and sent it to your wallet. It may be blank right now. It can take a max of 10 min to show up on OpenSea. Here's the link: https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n\n        console.log(\"Mining...please wait.\");\n        setMinting(true);\n        await nftTxn.wait();\n        console.log(nftTxn);\n        console.log(\n          `Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`\n        );\n        setMinting(false); //set NFT amount\n        let realAmount = await connectedContract.getTotalNFTsMintedSoFar();\n        console.log(realAmount.toString());\n        setNftAmount(realAmount.toString());\n      } else {\n        setMinting(false);\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      setMinting(false);\n      console.log(error);\n    }\n  };\n\n  const refreshAmount = async () => {\n    try {\n      if (web3Modal.cachedProvider) {\n        let wallet = await web3Modal.connect();\n        const provider = new ethers.providers.Web3Provider(wallet);\n\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n        let realAmount = await connectedContract.getTotalNFTsMintedSoFar();\n        console.log(realAmount.toString());\n        setNftAmount(realAmount.toString());\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    checkIfWalletIsConnected();\n    refreshAmount();\n  }, []);\n\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderMintUI = () => (\n    <button\n      onClick={askContractToMintNft}\n      className=\"cta-button connect-wallet-button\"\n    >\n      {!minting ? \"Mint NFT\" : \"Minting.....\"}\n    </button>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n            \"\"\n          ) : (\n            <p className=\"sub-text\">{nftAmount}/100 NFTs minted so far</p>\n          )}\n          {currentAccount === \"\"\n            ? renderNotConnectedContainer()\n            : renderMintUI()}\n          <p>\n            <a\n              className=\"footer-text\"\n              href=\"https://testnets.opensea.io/collection/coolerenyeagernft-v2\"\n            >\n              {\" \"}\n              🌊 View Collection on OpenSea\n            </a>\n          </p>\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{` @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}